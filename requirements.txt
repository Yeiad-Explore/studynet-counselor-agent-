# Django RAG Backend Requirements
# Optimized based on actual codebase usage analysis

# ============================================================================
# CORE DEPENDENCIES (Required - ~500MB total)
# ============================================================================

# Django Framework
Django==5.2.6
djangorestframework==3.16.1
django-cors-headers==4.9.0

# LangChain and AI
langchain==0.3.7
langchain-openai==0.2.8
langchain-community==0.3.7
langchain-chroma==0.1.4

# Azure OpenAI
openai==1.54.4
tiktoken==0.8.0

# Vector Database
chromadb==0.5.15

# Document Processing (Lightweight)
pypdf==5.1.0
python-docx==1.1.2

# Data Processing
pandas==2.2.3
pandasql==0.7.3
numpy==2.1.3

# Retrieval
rank-bm25==0.2.2

# Configuration
python-dotenv==1.0.1
pydantic==2.10.3

# Production Server
gunicorn==23.0.0
whitenoise==6.8.2

# ============================================================================
# OPTIONAL DEPENDENCIES
# ============================================================================

# Advanced Document Processing (Docling) - ~2-3GB with PyTorch
# Currently INSTALLED but optional - provides better PDF/DOCX quality
# To remove: pip uninstall docling docling-core easyocr
# System will automatically fallback to pypdf + python-docx
docling==2.9.2
docling-core==2.6.3
easyocr==1.7.2

# Reranking with Cross-Encoder - ~500MB
# Used in retriever.py for result reranking (optional, has fallback)
sentence-transformers==3.3.1

# Web Search Integration - NOT USED (commented out in code)
# TavilySearch is imported but not actively used in agent.py
# Uncomment if you want to enable web search:
# tavily-python==0.3.3

# ============================================================================
# NOT NEEDED (Removed)
# ============================================================================

# unstructured - Redundant with pypdf + python-docx
# pytest suite - Only for development, not production
# pytest==8.3.4
# pytest-django==4.9.0
# pytest-asyncio==0.24.0
